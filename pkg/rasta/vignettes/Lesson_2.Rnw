\documentclass[11pt,twoside,a4paper]{article}

%% BibTeX settings
\usepackage[authoryear,round]{natbib}

%% additional packages
\usepackage[latin1]{inputenc}
\usepackage{a4wide,graphicx,color,thumbpdf}
\usepackage{hyperref}
\usepackage{amsmath}
\usepackage{url}

% hyperref setup
\definecolor{Red}{rgb}{0.5,0,0}
\definecolor{Blue}{rgb}{0,0,0.5}
\hypersetup{%
  pdftitle = {Example Tutorial},
  pdfsubject = {},
  pdfkeywords = {MODIS, time series},
  pdfauthor = {Jan Verbesselt},
  %% change colorlinks to false for pretty printing
  colorlinks = {true},
  linkcolor = {Blue},
  citecolor = {Blue},
  urlcolor = {Red},
  hyperindex = {true},
  linktocpage = {true},
}

\usepackage{Sweave} %% is essentially

\begin{document}
\SweaveOpts{concordance=TRUE}

\title{Lesson 2}
\author{Jan Verbesselt}

\maketitle

\begin{abstract}
An intro to reading in spatial data: rasta and vector data with R.
\end{abstract}

\section{Today's learning objectives}

\begin{itemize}
	\item{Read, write, and visualize spatial data (vector/raster) using a script}
	\item{Find libraries which offer spatial data handling functions}
	\item{Learn to include functions from a library in your script}
\end{itemize}

\section{Set Your Working Directory and Load Your Libraries}
\subsection{Set the Working Directory}
Let's do some basic set up first. 

\begin{itemize}
	\item{Create a folder which will be your working directory e.g. \emph{Lesson2}}
	\item{Create an R script within that folder}
	\item{Set your working directory to the \emph{Lesson2} folder}
	\item{Create a $data$ folder within your working directory}
\end{itemize}

In the code block below type in the file path to where your data is being held and then (if you want) use the setwd() (set working directory) command to give R a default location to look for data files.

<<eval=FALSE>>=
setwd("yourworkingdirectory")
# This sets the working directory (where R looks for files)

getwd() # Double check your working directory
datdir <- "data/" #This is an example of a Mac file path
# datdir<- "/data/" #This is an example of a PC file path
@

\subsection{Load Libraries}
Next we will load a series of R packages that will give the functions we need to complete all the exercises in lesson 1 and 2. For this exercise all of the packages should (hopefully) be already installed on your machine (?). 
We will load them below using the library() command. 
I also included some comments describing how we use each of the packages in the exercises.

<<loadlibraries, message=FALSE>>=
#----Packages for Reading/Writing/Manipulating Spatial Data---
library(rgdal) # reading shapefiles and raster data
library(rgeos)
library(maptools)
library(spdep)   # useful spatial stat functions
library(spatstat) # functions for generating random points
library(raster) 
#---Packages for Data Visualization and Manipulation---
library(ggplot2)
library(reshape2)
library(scales)
@
\clearpage

\section{Read, plot, and explore spatial data}
\subsection{Read in a Shapefile}
The most flexible way to read in a shapefile is by using the \verb+readOGR+ command. This is the only option that will also read in the .prj file associated with the shapefile. NCEAS has a useful summary of the various ways to read in a shapefile: \url{http://www.nceas.ucsb.edu/scicomp/usecases/ReadWriteESRIShapeFiles}
I recommend always using \verb+readOGR()+.

Read OGR can be used for almost any vector data format. To read in a shapefile, you enter two arguments:
\begin{itemize}
\item dsn: the directory containing the shapefile (even if this is already your working directory)
\item layer: the name of the shapefile, without the file extension
\end{itemize}

% to illustrate how a file can be downloaded and read-in
<<eval=FALSE>>=
download.file('http://rasta.r-forge.r-project.org/kenyashape.zip',  
      'data/kenyashape.zip')
unzip('data/kenyashape.zip', exdir = datdir)
kenya <- readOGR(dsn = datdir, layer = 'kenya')
@

% % internal option
% <<kenya, echo=FALSE, fig=TRUE, include=FALSE>>=
% library(rasta)
% datdir <- system.file("extdata/", package="rasta")
% kenya <- readOGR(dsn = datdir, layer = 'kenya')
% plot(kenya)
% @

\clearpage
\subsection{Plotting the Data}
Plotting is easy, use the \verb+plot()+ command:
<<eval=FALSE>>=
plot(kenya)
@
Obviously there are more options to dress up your plot and make a proper map/graphic. A common method is to use \verb+spplot()+ from the sp package. However I prefer to use the functions available in the ggplot2 package as I think they are more flexible and intuitive. We will address maps and graphics later in the in the class. For now, let us move onto reading in some tabular data and merging that data to our shapefile (similar to the join operation in ArcGIS).

<<kenya, echo=FALSE, fig=TRUE, include=FALSE>>=
library(rasta)
data("kenya")
plot(kenya)
@

\begin{figure}[!htp]
\centering
\includegraphics[width=0.6\textwidth]{Lesson_2-kenya}
\caption{An example plot.}
\end{figure}

\clearpage
\subsection{Exploring the Data within the vector file}

We can explore some basic aspects of the data using \verb+summary()+ and \verb+str()+. Summary works on almost all R objects but returns different results depending on the type of object. For example if the object is the result of a linear regression then summary will give you the coefficient estimates, standard errors, t-stats, $R^2$, et cetera.

<<exploredata>>=
summary(kenya)
str(kenya,2)
@

As mentioned above, the \verb+summary()+ command works on virtually all R objects. In this case it gives some basic information about the projection, coordinates, and data contained in our shapefile

The \verb+str()+ or structure command tells us how R is actually storing and organizing our shapefile. This is a useful way to explore complex objects in R. When we use \verb+str()+ on a spatial polygon object, it tells us the object has five 'slots':
\begin{enumerate}
\item \emph{data}: This holds the data.frame
\item \emph{polygons}: This holds the coordinates of the polygons
\item \emph{plotOrder}: The order that the coordinates should be drawn
\item \emph{bbox}: The coordinates of the bounding box (edges of the shape file)
\item \emph{proj4string}: A character string describing the projection system
\end{enumerate}

The only one we want to worry about is data, because this is where the data.frame() associated with our spatial object is stored. 
We access slots using the @ sign.

%\textbf{Note} Mention S3 vs S4 classes?

<<accessdata>>=
#--------------------------ACCESS THE SHAPEFILE DATA------------------------------
dsdat<-as(kenya, "data.frame")  #extract the data into a regular data.frame
head(dsdat)

kenya$new<- 1:nrow(dsdat) #add a new colunm, just like adding data to a data.frame
head(kenya@data)
@


\end{document}
