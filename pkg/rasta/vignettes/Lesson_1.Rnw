\documentclass[10pt,compress,t,xcolor=table]{beamer}
\usetheme{Z}

\usepackage{url}
\usepackage[authoryear,round]{natbib}
\usepackage{animate}
\usepackage[table]{xcolor}
\definecolor{darkgray}{rgb}{0.8,0.8,0.8}
%% Tune beamer package 
\setbeamertemplate{caption}[numbered] %% Figs, Tables are now numbered
%% additional packages
\usepackage[latin1]{inputenc}
\usepackage{graphicx,color,thumbpdf}
\usepackage{hyperref}
\usepackage{amsmath}

% hyperref setup
\definecolor{Red}{rgb}{0.5,0,0}
\definecolor{Blue}{rgb}{0,0,0.5}
\hypersetup{
            pdftitle = {Lesson 1: Geo-scripting},
            colorlinks = {true},
            linkcolor = {Blue},
            citecolor = {Blue},
            urlcolor = {Red},
            hyperindex = {true},
            linktocpage = {true},
}

%%\VignetteIndexEntry{Lesson 1: Introduction to basic concepts of R}

\usepackage{Sweave} 

<<preliminaries, echo=FALSE, results=hide>>=
options(width = 80, prompt = "> ", continue = "+ ")
@

\begin{document}

\SweaveOpts{concordance=TRUE}

\title{Applied Geo-Scripting: Lesson 1}

\author{Jan Verbesselt, Lo\"{i}c Dutrieux, Ben De Vries, Sytze de Bruyn, Aldo Bergsma}

\Logo{figs/forest_small.jpg}
% add wur logo
\maketitle

\begin{frame}
\frametitle{Intro of the intro!}

\begin{itemize}
  	\item{The course is freshly developed based on needs from people how deal with spatial data}
	\item{It is a new course, there is a certain flexibility to adjust the content}
	\item{A team of R experts, Loic, Ben, Eliakim, Sytze, who use Geo-scripting languages every day helped to develop this course}
	\item{Feedback is welcome and we are there to help you during this \emph{Geo-scripting} learning experience}
	\item Avoid copy paste, and make sure you understand basically all steps 
	
	\begin{itemize}
  		\item{We will show you how to find help}
		\item{Try to solve the problem as independent as possible}
		\item{Work together with fellow students but make sure you complete everything yourself}
	\end{itemize}
	\item \textbf{You need to speak a language in order to learn it!}

\end{itemize}	

\end{frame}

\begin{frame}
\frametitle{Intro of the intro!}

\begin{itemize}
  	\item{How many student have a laptop?}
	\item{Student ID's}
	\item{At end of the week - there will be Go/No Go moment to see if want and can continue with the course based on your motivation and basic scripting language knowledge}
	\item{\href{http://goo.gl/HTtND8}{Course planning and practical issues}}
	\item The afternoon (14-17u)
	\begin{itemize}
  		\item{2 hours course}
		\item{1 hour excercise}
		\item{Hand in the exercise the next day 9am.}
	\end{itemize}

\end{itemize}
\end{frame}


\begin{frame}
\frametitle{Geo-scripting learning objectives}

\begin{itemize}
  	\item{Understand basic concepts of applied scripting for spatial data}
	\item{Use functions from a library while writing your script}
	\item{Find libraries which offer spatial data handling functions}
	\item{Know how to find help (on spatial data handling functions)}
	\item{Solve scripting problems (debug, reproducible example, writing functions)}
	\item{Read, write, and visualise spatial data (vector/raster) using a script}
	\item{Apply learned concepts in a case study with geo-data by solving a spatial/ecological/applied question (e.g. detect forest changes, flood mapping, ocean floor depth analysis, bear movement, etc.) with a raster and vector dataset.}
\end{itemize}
\end{frame}

\begin{frame}
\frametitle{Today's topics}

Introduction to the applied geo-scripting:
\begin{itemize}
	\item{Why geo-scripting?}
  \item{Getting up to speed with R and loading the 'RASTA' package}
  \item{Creating a simple function}
  \item{Make a spatial map using a script}
\end{itemize}
\medskip

%\centering
\textbf{RASTA: Reproducible and Applied Spatial and Temporal Analaysis} \\
\url{http://rasta.r-forge.r-project.org}. \\

\emph{We will install this package and use the data and scripts during this course}

\end{frame}

\begin{frame}
\frametitle{Why geo-scripting?}
\begin{itemize}
	\item{Reproducible: avoid clicking and you keep track of what you have done}
	\item{Efficient: you can write a script to do something for you e.g. multiple times e.g. automatically downloading data}
	\item{Build your own tools and functions (e.g. raster filters, MODIS download tool, BFAST package)}
	\item{Enable collaboration: sharing scripts, functions, and packages}
	\item{Good for finding errors i.e. debugging}
\end{itemize}
\medskip
This course is fully written with scripting languages (i.e. R and Latex). What are the advantages?
% the course is reproducible - any body in the world can follow it
% we have build our own functions and tools to share it with others - as such the can be further improved. We do not want to re-invent the wheel
\end{frame}

\begin{frame}
\frametitle{What  is a scripting language?}
\begin{itemize}
  \item{A scripting language (e.g. R and Python) can interpret and automate the execution of 
  tasks which could alternatively be executed one-by-one by a human operator}
  \item{Different from like C/C++/Fortran since these are languages that need to be compiled first. \\ }
  
  \item{Compiling? To transform a program written in a high-level programming language from source code into object code. Programmers write programs in a form called source code. Source code must go through several steps before it becomes an executable program. The first step is to pass the source code through a compiler, which translates the high-level language instructions into object code.
  }
  \item{A scripting language is the glue, between different commands, functions, and objectives without the need to compile it for each OS/CPU Architecture}
  
  % insert compile figure
  
\end{itemize}
\end{frame}

\begin{frame}
\frametitle{Different scripting languages for geo-scripting}
The main scripting languages for GIS and Remote sensing currently are: 
\begin{itemize} % [<+->]
  \item R
  \item Python
   \begin{itemize}
     \item stand-alone (ArcPy and PyQGIS)
     \item integrated within ArcGIS, QGIS 
    \end{itemize}
  \item GRASS (grass function are included in QGIS)
  \item Javascript for geoweb scripting
  \item Matlab
  \item IDL (ENVI)
\end{itemize}
\end{frame}

\begin{frame}
\frametitle{Python versus R}
\begin{itemize}
  \item{Python is a general purpose programming language with a clear syntax}
  \item{R is particularly strong in statistical computing and graphics}
  \item{Installing libraries in Python is sometimes challenging}
  \item{Syntactic differences can be confusing (especially when combining these) }
  \item{There are many R and Python packages for spatial analyses and for dealing with spatial data}
  \item{Scripts in both languages can be combined:}
  \begin{itemize}
   \item {call R from Python using \textbf{RPy, RPy2}}
   \item {call Python from R \url{http://rpython.r-forge.r-project.org/}}
  \end{itemize}
  \item Many programs have support for:
   \begin{itemize}
    \item Python (Blender, Sketchup, QGIS, MySQL, PostGIS)
    \item R (GRASS, QGIS, MySQL, PostGIS)
   \end{itemize}
\end{itemize}

\end{frame}

\begin{frame}
\frametitle{System set-up and overview}

\begin{figure}[htp!]
  \centering
  \fbox{\includegraphics[width=0.6\textwidth]{figs/system_overview_2.png}}
  \caption {System set-up}
  \label{systemoverview}
\end{figure}

\begin{itemize}
  \item Version control system (e.g. for scripts): SVN (SubVersioN) and Git
  \item \href{http://en.wikipedia.org/wiki/GDAL}{GDAL/OGR}: \href{http://www.gdal.org/}{Geospatial Data Abstraction Library}
  \item GEOS:  \href{http://trac.osgeo.org/geos/}{Geometry Engine} and \href{http://trac.osgeo.org/proj/}{PROJ.4}
   \item R libraries: rgeos, rgdal
\end{itemize}
\end{frame}

\begin{frame}[fragile]
\frametitle{Get Your R On}

\textbf{Getting started with Rstudio}
This preliminary section will cover some basic details about R. 
For this course we will use Rstudio as an IDE to write and run scripts. Open Rstudio!
Now type the following script in the R console:

<<>>=
rm(list = ls())  # Clear the workspace!
ls() ## no objects left in the workspace
@ 
A good way to start most R scripts

<<>>=
a <- 1
a
@
The first line you passed to the console created a new object named  $a$ in memory. 
The symbol '<-' is somewhat equivalent to an equal sign but recommended as it is used internally. 
In the second line you printed $a$ to the console by simply typing it's name. 
\medskip

\textbf{What is the class of this object?}
\end{frame}

\begin{frame}[fragile]
\frametitle{Get Your R On}
<<>>=
class(a)
@
You now have requested the \textbf{class} attribute of $a$ and the console has returned the attribute: \textbf{numeric}. R possesses a simple mechanism to support an object-oriented style of programming. All objects ($a$ in this case) have a class attribute assigned to them. \textbf{R} is quite forgiving and will assign a class to an object even if you haven't specified one (as you didn't in this case). Classes are a very important feature of the \textbf{R} environment. Any function or method that is applied to an object takes into account its class and uses this information to determine the correct course of action.
\end{frame}

\begin{frame}[fragile]
\frametitle{Set Your Working Directory}
Let's do some basic set up first. 

\begin{itemize}
  \item{Create a folder which will be your working directory e.g. \emph{Lesson1}}
  \item{Create an R script within that folder}
	\item{Set your working directory to the \emph{Lesson1} folder}
	\item{Create a $data$ folder within your working directory}
\end{itemize}

In the code block below type in the file path to where your data is being held and then (if you want) use the setwd() (set working directory) command to give R a default location to look for data files.

<<eval=FALSE>>=
setwd("yourworkingdirectory")
# This sets the working directory (where R looks for files)
getwd() # Double check your working directory
@

<<>>=
datdir <- file.path("data") ## path
@
\end{frame}

\begin{frame}[fragile]
\frametitle{Custom Functions}
It is hard to unleash the full potential of R without writing your own functions. Luckily it's very easy to do. Here are some trivial examples:

<<echo=TRUE, results=hide>>=
add <- function(x){ 
#put the function arguments in () and the evaluation in {}
  x + 1
}
add(4) 
@
Set the default values for your function
<<echo = TRUE, results=hide>>=
add <- function(x = 5) {
  z <- x + 1
  return(z)
}
add() 
add(6)
@

That's about all there is to it. The function will generally return the result of the last line that was evaluated. 

\textbf{How do you write a function that returns x and z?}

\end{frame}

\begin{frame}[fragile]
Now, let's declares a new object, a new function, \textbf{newfunc} (this is just a name and if you like you can give this function another name). Appearing in the first set of brackets is an argument list that specifies (in this case) two names. The value of the function appears within the second set of brackets where the process applied to the named objects from the argument list is defined. 

<<echo=TRUE, results=hide>>=
newfunc <- function(x, y) {
  z <- 2*x + y
  return(c(z,x,y))
} 
a2b <- newfunc(2, 4)
a2b
rm(a, newfunc, a2b)
@

Next, a new object $a2b$ is created which contains the result of applying \textbf{newfunc} to the two objects you have defined earlier. The second last R command prints this new object to the console. Finally, you can now remove the objects you have created to make room for the next exercise by selecting and running the last line of the code.

\end{frame}

\begin{frame}
\frametitle{Help?!}
\textbf{R} is supported by a very comprehensive help system. Help on any function can be accessed by entering the name of the function into the console preceded with a $?$. The easiest way to access the system is to open a web-browser. This help system can be started by entering \textbf{help.start()} in the R console.


\textbf{How do you find help about the \emph{remove} function?}

 \end{frame}

\begin{frame}
\frametitle{Data Structures}
There are several ways that data are stored in R. Here are the main ones:

\begin{itemize}
\item \textbf{Vectors}: is the most generic data structure. In R, any variable of an atomic data type (numeric, integer, logical, character) is a vector. See examples below.
\item \textbf{Data Frames}: is the most common format and similar to a spread sheet. A data.frame() is indexed by rows and columns and store numeric and character data. The data.frame is typically what is used when reading in csv files, do regressions, etc.
\item \textbf{Matrices and Arrays} Similar to data.frames but slightly faster computation wise while sacrificing some of the flexibility in terms of what information can be stored. In R a matrix object is a special case of an array that only has 2 dimensions. i.e., an array is n-dimensional matrix while a matrix only has rows and columns (2 dimensions)
\item \textbf{Lists} The most common and flexible type of R object. A list is simply a collection of other objects. For example a regression object is a list of: 1) Coefficient estimates 2) Standard Errors and other results.
\end{itemize}

We will look at examples of these objects in the next sectionl
\end{frame}
 
\begin{frame}[fragile]
\frametitle{R packages and the rasta package}
 R `packages' are user contributed functions. There are about 5000 or so (with a constantly expanding list). 
 If a package is already installed you load the package with the \verb+library()+ command. If you want to install a package you can use the \verb+install.packages()+ command (you have to provide the url of the CRAN mirror to download the package. 
 If you are using R Studio you can also just click on \textbf{Tools>Install Packages}, and type in the name(s) of the package you want to install. 

Now install and load the rasta package:
<<echo=TRUE, eval=FALSE>>=
install.packages("rasta", repos="http://R-Forge.R-project.org")
@

<<results=hide>>=
library(rasta) ## load the rasta library
@

<<eval=FALSE>>=
?mysummary
mysummary
@

\emph{What does the function do?}
\end{frame}

\begin{frame}[fragile]
\frametitle{Reading Data in and Out}
The most common way to read in spread sheet tables is with the $read.csv()$ command. 
However you can read in virtually any type of text file. Type ?read.table in your console for some other examples.

%% make the font small of these explanation sections.
% If you have really large binary data sets sometimes the \verb+scan()+ function is more efficient. 
% Finally using the \textbf{foreign} package you can read in SPSS, STATA, Matlab, SAS, and a host of other data formats from other stat and math software.
% Let's read in a basic csv file. 

<<>>=
f <- system.file(file.path("extdata", "kenpop89to99.csv"), 
                 package ="rasta")
mydat <- read.csv(f)
@

We can explore the data using the  names(), summary(), head(), and tail() commands (we will use these frequently through out the exercise)

<<results=hide>>=
names(mydat)[1:3]
summary(mydat$Y89Pop)[1:3]
head(mydat$Y89Births)[1:2]
@

\begin{itemize}
\item What is the class of the $mydat$? 
\item How can we write out the data.frame to a csv file in our working directory?
\end{itemize}

Lets do a basic regression so you can see an example of a list.
\end{frame}


\begin{frame}[fragile]
\frametitle{Basic regression and example of a list}
We use the \verb+lm()+ command to do a basic linear regression. The \verb+~+ symbol separates the left and right hand sides of the equation and we use `+' to separate terms and `*' to specify interactions.
\emph{Regress the Population in 1999 on the population and birthrate in 1989}
<<regression>>=
myreg<-lm(Y99Pop ~ Y89Births + Y89Brate, data = mydat) 
myreg[c(1,8)]
@

\end{frame}

\begin{frame}[fragile]
\frametitle{Basic regression and example of a list}
A regression object is an example of a list. We can use the \verb+names()+ command to see what the list contains. We can use the summary() command to get a standard regression output (coefficients, standard errors, et cetera) and we can also create a new object that contains all the elements of a regression summary.

<<>>=
names(myreg)[1:3]
myregsum <- summary(myreg)
myregsum[["adj.r.squared"]] #extract the adjusted r squared
myregsum$adj.r.squared # does the same thing
@

\textbf{why is $myregsum$ a list object? What is the advantage of a list?}
That concludes our basic introduction to data.frames and lists. There is alot more material out on the web if you are interested.
\end{frame}

\begin{frame}[fragile]
\frametitle{Create a spatial map using a script}
Here is an example of how you can create a map in R:

<<>>=
## Load required packages
library(rasta)
@

Download data from the Global Adminstrative Areas Data base 
(\href{http://www.gadm.org}{GADM}).

<<echo=FALSE, eval=TRUE>>=
require(raster)
if (!file.exists(datdir)) { dir.create(datdir)}
if (!file.exists(file.path(datdir, "PHL_adm2.RData"))) {
  adm <- raster::getData("GADM", country = "PHL", level=2, path = "data/")
} else {
  load(file.path(datdir, "PHL_adm2.RData"))
  adm <- gadm
}
@

There is a function do get $public$ data from anywhere in the world. See help of the getData funciton in the \textbf{raster} package.
<<eval=FALSE>>=
?getData
?raster::getData
@

Read the help to find out how we can find the country codes? \\
\textbf{What is the country code of Belgium?}

<<eval=FALSE, echo=FALSE>>=
raster::getData("ISO3")
@

Now we will download the administrative boundaries of the Philippines:

<<echo=TRUE, eval=FALSE, fig=FALSE>>=
adm <- raster::getData("GADM", country = "PHL", 
                       level = 2, path = datdir)
plot(adm)
@
\end{frame}

\begin{frame}[fragile]
\frametitle{Create a spatial map using a script}

Try to understand the code below, and let me know if you have questions. Feel free to use this code as an example and use this for the excercise below.

<<phil, eval=TRUE, fig=TRUE, include=FALSE>>=
mar <- adm[adm$NAME_1 == "Marinduque",]
plot(mar, bg = "dodgerblue", axes=T)
plot(mar, lwd = 10, border = "skyblue", add=T)
plot(mar, col = "green4", add = T)
grid()
box()
invisible(text(getSpPPolygonsLabptSlots(mar), 
labels = as.character(mar$NAME_2), cex = 1.1, col = "white", font = 2))
mtext(side = 3, line = 1, "Provincial Map of Marinduque", cex = 2)
mtext(side = 1, "Longitude", line = 2.5, cex=1.1)
mtext(side = 2, "Latitude", line = 2.5, cex=1.1) 
text(122.08, 13.22, "Projection: Geographic\n
Coordinate System: WGS 1984\n
Data Source: GADM.org", adj = c(0, 0), cex = 0.7, col = "grey20")
@
\end{frame}

\begin{frame}[fragile]
\frametitle{Create a spatial map using a script}
\begin{figure}[!htp]
\centering
\includegraphics[width=0.6\textwidth]{Lesson_1-phil}
\caption{Adminstrative boundaries of Marinduque}
\end{figure}
\end{frame}

\begin{frame}[fragile]
\frametitle{Ex.Lesson 1: Write you own function to create a map}

\begin{itemize}
\item Submit a clear, reproducible, and documented script containing a function to create a spatial map
  \begin{itemize}
  \item define a function
  \item demonstrate the function
  \item make sure the script is tested by somebody else
  \item keep it simple (!) e.g. just plot the adminstrative boundaries
  \end{itemize}
\item The function should accept \emph{country} and \emph{level} as input arguments
\item{Filename: \emph{lastnamefirstname.R}}

\end{itemize}
\end{frame}


\begin{frame}
\frametitle{More information}
For more information about R please refer to the following links:
\begin{itemize}
\item {\url{http://www.statmethods.net/index.html} This is a great website for learning R function, graphs, and stats.}
\item {the book on Applied spatial Data analysis with R 
 \url{http://www.asdar-book.org/} \citep{Bivand:2013ux}.}
\item  {Visit \url{http://www.r-project.org/} and check out the Manuals i.e an introductions to R}
\item Overview of R functionality for spatial data analysis: \url{http://cran.r-project.org/web/views/Spatial.html}
\item \url{http://gis.stackexchange.com/questions/45327/tutorials-to-handle-spatial-data-in-r}
\item \href{http://pairach.com/2012/06/06/r-style-guide/}{More info about R code and style guide}
\end{itemize}
\end{frame}

\begin{frame}[fragile]
\frametitle{Extra challenge - for ggplot lovers}
\textbf{Optional challenge}

<<ggplotphil, eval=FALSE, fig=TRUE, include=FALSE>>=
require(ggmap)
shp.spdf <- adm[adm$NAME_1=="Marinduque",]
shp.df <- fortify(shp.spdf)
shp.centroids.df <- data.frame(long = coordinates(shp.spdf)[,1], 
                               lat = coordinates(shp.spdf)[,2])
# Get names and id numbers corresponding to administrative areas
shp.centroids.df[, "ID_1"] <- shp.spdf@data[,"ID_1"]
shp.centroids.df[, "NAME_2"] <- shp.spdf@data[,"NAME_2"]
q <- qmap(location = "Marinduque", zoom = 10, maptype = "satellite")
q = q +  geom_polygon(aes(x = long, y = lat, group = group), 
    data = shp.df, 
    colour = "white", fill = "black", alpha = .4, size = .3) 

q = q + geom_text(data = shp.centroids.df, 
    aes(label = NAME_2, x = long, y = lat, group = NAME_2), 
                  size = 3, colour= "white")
print(q)
@
\end{frame}

% \begin{frame}[fragile]
% \frametitle{Extra challenge - for ggplot lovers}
% 
% \begin{figure}[!htp]
% \centering
% \includegraphics[width=0.6\textwidth]{Lesson_1-ggplotphil}
% \caption{GoogleMap Satellite view of Marinduque}
% \end{figure}
% 
% \end{frame}






\bibliographystyle{model5-names}
\bibliography{refs}


\end{document}
