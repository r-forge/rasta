\documentclass[10pt,compress,t,xcolor=table]{beamer}
\usetheme{Z}

\usepackage{url}
\usepackage[authoryear,round]{natbib}
\usepackage{animate}
\usepackage[table]{xcolor}
\definecolor{darkgray}{rgb}{0.8,0.8,0.8}

%% additional packages
\usepackage[latin1]{inputenc}
\usepackage{graphicx,color,thumbpdf}
\usepackage{hyperref}
\usepackage{amsmath}


% hyperref setup
\definecolor{Red}{rgb}{0.5,0,0}
\definecolor{Blue}{rgb}{0,0,0.5}
\hypersetup{%
            pdftitle = {Lesson 1: Geo-scripting},
            %% change colorlinks to false for pretty printing
            colorlinks = {true},
            linkcolor = {Blue},
            citecolor = {Blue},
            urlcolor = {Red},
            hyperindex = {true},
            linktocpage = {true},
}

\SweaveOpts{engine = R, eps = FALSE, pdf = FALSE, png = TRUE, resolution = 120, keep.source = TRUE}

<<preliminaries, echo=FALSE, results=hide>>=
options(width = 70, prompt = "R> ", continue = "+ ")
@

\begin{document}

\SweaveOpts{concordance=TRUE}

\title{Applied Geo-Scripting: Lesson 1}

\author{Jan Verbesselt, et al.}

\Logo{figs/forest_small.jpg}

\maketitle

\begin{frame}
\frametitle{Geo-scripting learning objectives}

\begin{itemize}
	\item{Learn to read, write, and visualize spatial data (vector/raster) using a script}
	\item{Know how to find help (on spatial data handling functions)}
	\item{Solve scripting problems (debug, reproducible example, writing functions)}
	\item{Find libraries which offer spatial data handling functions}
	\item{Learn to include functions from a library in your script}
	\item{Apply learned concepts in a case study: learning how to address a spatial/ecological/applied case (e.g. detect forest changes, flood mapping, ocean floor depth analysis, bear movement, etc.) with a raster and vector dataset.}
\end{itemize}

\end{frame}

\begin{frame}
\frametitle{Today's topics}
\begin{itemize}
	\item{Intro to basic concepts of applied scripting for spatial data}
  \item{Why geo-scripting?}
  \item{Course planning and practical issues}
  \item{Getting Us up to speed with R and the 'rasta' package}
% add link to the rasta package
\end{itemize}

\end{frame}


\begin{frame}
\frametitle{Why geo-scripting?}

\begin{itemize}
	\item{Reproducible: avoid clicking and you keep track of what you have done}
	\item{Efficient: you can write a script to do something for you e.g. multiple times e.g. automatically downloading data}
	\item{Enable collaboration: sharing scripts, functions, and packages}
	\item{Good for finding errors i.e. debugging}
	e.g. this course is fully writing with scripting languages (i.e. R and Latex).
\end{itemize}
\end{frame}

%% remaining idea's: demo's Loic?

\begin{frame}[fragile]
\frametitle{Get Your R On}

\textbf{Getting started with Rstudio and the rasta package}
This preliminary section will cover some basic details about R. 
For this course we will use Rstudio as an IDE to write and run scripts. Open Rstudio!
Now type the following script in the R console:
<<>>=
a <- 1
a
@
The first line you passed to the console created a new object named  $a$ in memory. 
The symbol '<-' is somewhat equivalent to an equal sign. 
In the second line you printed $a$ to the console by simply typing it's name. 
\medskip

\textbf{What is the class of this object?}
\end{frame}

\begin{frame}[fragile]
\frametitle{Get Your R On}
<<>>=
class(a)
@
You now have requested the \textbf{class} attribute of $a$ and the console has returned the attribute: \textbf{numeric}. R possesses a simple mechanism to support an object-oriented style of programming. All objects ($a$ in this case) have a class attribute assigned to them. \textbf{R} is quite forgiving and will assign a class to an object even if you haven't specified one (as you didn't in this case). Classes are a very important feature of the \textbf{R} environment. Any function or method that is applied to an object takes into account its class and uses this information to determine the correct course of action.
\end{frame}

%% See at Lesson_1and2.Rnw for more details -- Jan

\begin{frame}[fragile]
\frametitle{The rasta package}

<<rastaintro>>=
library(rasta) ## load the rasta library
#?rasta
@
\end{frame}

\begin{frame}[fragile]
\frametitle{Reading Data in and Out}
The most common way to read in data is with the \verb+read.csv()+ command. 
% However you can read in virtually any type of text file. 
Type ?read.table in your console for some other examples.

%% make the font small of these explanation sections.
% If you have really large binary data sets sometimes the \verb+scan()+ function is more efficient. 
% Finally using the \textbf{foreign} package you can read in SPSS, STATA, Matlab, SAS, and a host of other data formats from other stat and math software.
% Let's read in a basic csv file. 

<<readcsvexample>>=
f <- system.file("extdata/kenpop89to99.csv", package="rasta")
mydat<-read.csv(f)
@
We can explore the data using the  names(), summary(), head(), and tail() commands (we will use these frequently through out the exercise)

<<explore>>=
names(mydat) #colunm names
summary(mydat$Y89Pop) 
head(mydat$Y89Births)   # see ?head
@
We will go over ways to index and subscript data.frames later. Lets do a basic regression so you can see an example of a list.
\end{frame}

\begin{frame}[fragile]

\frametitle{Basic regression and example of a list}
We use the \verb+lm()+ command to do a basic linear regression. The \verb+~+ symbol separates the left and right hand sides of the equation and we use `+' to separate terms and `*' to specify interactions.
<<regression>>=
myreg<-lm(Y99Pop~Y89Births+Y89Brate,data=mydat) 
#Regress the Population in 1999 on the population and birthrate in 1989
myreg
@

\end{frame}

% 
% A regression object is an example of a list. We can use the \verb+names()+ command to see what the list contains. We can use the summary() command to get a standard regression output (coefficients, standard errors, et cetera) and we can also create a new object that contains all the elements of a regression summary.
% 
% <<exploreregobject>>=
% #--------------------------EXPLORE A REGRESSION OBJECT------------------------------
% 
% names(myreg) #get the names of the items in the regression object
% 
% summary(myreg) #print out the key information
% 
% myregsum<-summary(myreg) #create a new regression summary object
% 
% names(myregsum)
% 
% myregsum[['adj.r.squared']] #extract the adjusted r squared
% 
% myregsum$adj.r.squared #does the same thing
% @
% 
% That concludes our basic introduction to data.frames and lists. There is alot more material out on the web if you are interested. Later in the exercise we will look at data.frames in more detail.

 
 
\begin{frame}
\frametitle{Excercise Lesson 1: Write you own function to find out what the "class" and "average" of all objects in...} 
\end{frame}

\begin{frame}
\frametitle{More information}
For more information about R please refer to the following links \url{http://www.statmethods.net/index.html}. 
This is a great website for learning R function, graphs, and stats. Also visit \url{http://www.r-project.org/} and check out the Manuals i.e an introductions to R
See also the book on Applied spatial Data analysis with R \url{http://www.asdar-book.org/} \citep{Bivand:2013ux}.

\end{frame}

\bibliographystyle{model5-names}
\bibliography{refs}


\end{document}
