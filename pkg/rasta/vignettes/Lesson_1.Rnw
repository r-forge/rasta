\documentclass[10pt,compress,t,xcolor=table]{beamer}
\usetheme{Z}

\usepackage{url}
\usepackage[authoryear,round]{natbib}
\usepackage{animate}
\usepackage[table]{xcolor}
\definecolor{darkgray}{rgb}{0.8,0.8,0.8}
%% Tune beamer package 
\setbeamertemplate{caption}[numbered] %% Figs, Tables are now numbered
%% additional packages
\usepackage[latin1]{inputenc}
\usepackage{graphicx,color,thumbpdf}
\usepackage{hyperref}
\usepackage{amsmath}


% hyperref setup
\definecolor{Red}{rgb}{0.5,0,0}
\definecolor{Blue}{rgb}{0,0,0.5}
\hypersetup{%
            pdftitle = {Lesson 1: Geo-scripting},
            %% change colorlinks to false for pretty printing
            colorlinks = {true},
            linkcolor = {Blue},
            citecolor = {Blue},
            urlcolor = {Red},
            hyperindex = {true},
            linktocpage = {true},
}

% \SweaveOpts{engine = R, eps = FALSE, pdf = FALSE, png = TRUE, resolution = 120, keep.source = TRUE}
\usepackage{Sweave} 
%\DefineVerbatimEnvironment{Sinput}{Verbatim} {xleftmargin=0em,
%                                             frame=single}
%\DefineVerbatimEnvironment{Soutput}{Verbatim}{xleftmargin=0em,
%                                            frame=single}

<<preliminaries, echo=FALSE, results=hide>>=
options(width = 70, prompt = ">", continue = "+ ")
@

\begin{document}

\SweaveOpts{concordance=TRUE}

\title{Applied Geo-Scripting: Lesson 1}

\author{Jan Verbesselt, Sytze de Bruyn, Lo\"{i}c Dutrieux, Ben De Vries, Aldo Bergsma}

\Logo{figs/forest_small.jpg}

\maketitle

\begin{frame}
\frametitle{Geo-scripting learning objectives}

\begin{itemize}
  \item{Handle spatial data using a scripting language}
	\item{Read, write, and visualize spatial data (vector/raster) using a script}
	\item{Know how to find help (on spatial data handling functions)}
	\item{Solve scripting problems (debug, reproducible example, writing functions)}
	\item{Find libraries which offer spatial data handling functions}
	\item{Learn to include functions from a library in your script}
	\item{Apply learned concepts in a case study: learning how to address a spatial/ecological/applied case (e.g. detect forest changes, ocean floor depth analysis, bear movement, etc.) with a raster and vector dataset.}
\end{itemize}
\end{frame}

\begin{frame}
\frametitle{Today's topics}
\begin{itemize}
	\item{Intro to basic concepts of applied scripting for spatial data}
  \item{Why geo-scripting?}
  \item{Course planning and practical issues}
  \item{Getting up to speed with R and loading 'rasta' package}
\end{itemize}

\medskip
\textbf{RASTA: Reproducible and Applied Spatial and Temporal Analaysis}
\url{http://rasta.r-forge.r-project.org}

\end{frame}


\begin{frame}
\frametitle{Why geo-scripting?}

\begin{itemize}
	\item{Reproducible: avoid clicking and you keep track of what you have done}
	\item{Efficient: you can write a script to do something for you e.g. multiple times e.g. automatically downloading data}
	\item{Build your own tools and functions (e.g. raster filters, MODIS download tool, BFAST package)}
	\item{Enable collaboration: sharing scripts, functions, and packages}
	\item{Good for finding errors i.e. debugging}
	e.g. this course is fully writting with scripting languages (i.e. R and Latex).
\end{itemize}
\end{frame}

\begin{frame}
\frametitle{What  is a scripting language?}
\begin{itemize}
  \item{A scripting language or script language is a programming language that supports the writing of scripts, 
  programs written for a special runtime environment that can interpret and automate the execution of 
  tasks which could alternatively be executed one-by-one by a human operator}
  \item{Different from compiled languages like C/C++/Fortran.}
  \item{A scripting language is the glue, between different commands, functions, and objectives without the need to compile it for each OS/CPU Architecture}
\end{itemize}
\end{frame}

\begin{frame}
\frametitle{Different scripting languages for geo-scripting}
The main scripting languages for GIS and Remote sensing currently are: 
\begin{itemize} % [<+->]
  \item R
  \item Python
   \begin{itemize}
     \item stand-alone (ArcPy and PyQGIS)
     \item integrated within ArcGIS, QGIS 
    \end{itemize}
  \item GRASS (grass function are included in QGIS)
  \item Javascript for geoweb scripting
\end{itemize}
\end{frame}

\begin{frame}
\frametitle{Python versus R}
\begin{itemize}
  \item{Python is a general purpose programming language with a clear syntax}
  \item{R is particularly strong in statistical computing and graphics}
  \item{Installing libraries in Python is sometimes challenging}
  \item{Syntactic differences can be confusing (especially when combining these) }
  \item{There are many R and Python packages for spatial analyses and for dealing with spatial data}
  \item{Scripts in both languages can be combined:}
  \begin{itemize}
   \item {call R from Python using \textbf{RPy, RPy2}}
   \item {call Python from R \url{http://rpython.r-forge.r-project.org/}}
  \end{itemize}
  \item Many programs have support for:
   \begin{itemize}
    \item Python (Blender, Sketchup, QGIS, MySQL, PostGIS)
    \item R (GRASS, QGIS, MySQL, PostGIS)
   \end{itemize}
\end{itemize}

\end{frame}

\begin{frame}
\frametitle{Course set-up}

\begin{figure}[htp!]
\centering
    \includegraphics[height=0.4\textwidth]{figs/system_overview.png}
  \caption{Course set-up}
  \label{fig:systemoverview}
\end{figure}

\begin{itemize}
  \item{SVN (SubVersioN): Version control system for scrits and docs}
  \item{R libraries: rgeos, rgdal}
  \item{GDAL: Geospatial Data Abstraction Library \url{http://www.gdal.org/}}
  \item{GEOS:  Geometry Engine, Open Source \url{http://trac.osgeo.org/geos/}}
\end{itemize}
\end{frame}

\begin{frame}[fragile]
\frametitle{Get Your R On}

\textbf{Getting started with Rstudio}
This preliminary section will cover some basic details about R. 
For this course we will use Rstudio as an IDE to write and run scripts. Open Rstudio!
Now type the following script in the R console:

<<>>=
rm(list=ls())  # Clear the workspace!
ls() ## no objects left in the workspace
@ 
A good way to start most R scripts

<<>>=
a <- 1
a
@
The first line you passed to the console created a new object named  $a$ in memory. 
The symbol '<-' is somewhat equivalent to an equal sign. 
In the second line you printed $a$ to the console by simply typing it's name. 
\medskip

\textbf{What is the class of this object?}
\end{frame}

\begin{frame}[fragile]
\frametitle{Get Your R On}
<<>>=
class(a)
@
You now have requested the \textbf{class} attribute of $a$ and the console has returned the attribute: \textbf{numeric}. R possesses a simple mechanism to support an object-oriented style of programming. All objects ($a$ in this case) have a class attribute assigned to them. \textbf{R} is quite forgiving and will assign a class to an object even if you haven't specified one (as you didn't in this case). Classes are a very important feature of the \textbf{R} environment. Any function or method that is applied to an object takes into account its class and uses this information to determine the correct course of action.
\end{frame}

\begin{frame}[fragile]
\frametitle{Custom Functions}
It is hard to unleash the full potential of R without writing your own functions. Luckily it's very easy to do. Here are some trivial examples:

<<>>=
add <- function(x){ 
#put the function arguments in () and the evaluation in {}
  x + 1
}
add(4) 

# Set the default values for your function--
add <- function(x = 5){
  x + 1
}
add()  #automatically evaluates x = 5
add(6) #but you can still change the defaults
@

That's about all there is too it. The function will generally return the result of the 
last line that was evaluated. However you can also use \verb+return()+ to specify exactly what the function will return.
\end{frame}

\begin{frame}[fragile]
Now, let's declares a new object, a new function, \textbf{newfunc} (this is just a name and if you like you can give this function another name). Appearing in the first set of brackets is an argument list that specifies (in this case) two names. The value of the function appears within the second set of brackets where the process applied to the named objects from the argument list is defined. 

<<echo=TRUE>>=
newfunc <- function(x, y) {
  2*x + y
} 

a2b <- newfunc(2, 4)
a2b
rm(a, newfunc, a2b)
@
\end{frame}

% Next, a new object $a2b$ is created which contains the result of applying \textbf{newfunc} to the two objects you have defined earlier. The second last R command prints this new object to the console. Finally, you can now remove the objects you have created to make room for the next exercise by selecting and running the last line of the code.

\begin{frame}
\frametitle{Help?!}
\textbf{R} is supported by a very comprehensive help system. Help on any function can be accessed by entering the name of the function into the console preceded with a $?$. The easiest way to access the system is to open a web-browser. This help system can be started by entering \textbf{help.start()} in the R console. Try it and see what happens.
 \end{frame}

\begin{frame}
\frametitle{Data Structures}
There are several ways that data are stored in R. Here are the main ones:
\begin{itemize}

\item \textbf{Vectors} The most generic data structure. In R, any variable of an atomic data type (numeric, integer, logical, character) is a vector. This will be examplified below.

\item \textbf{Data Frames} The most common format. Similar to a spread sheet. A data.frame() is indexed by rows and columns and store numeric and character data. The data.frame is typically what we use when we read in csv files, do regressions, et cetera.

\item \textbf{Matrices and Arrays} Similar to data.frames but slightly faster computation wise while sacrificing some of the flexibility in terms of what information can be stored. In R a matrix object is a special case of an array that only has 2 dimensions. i.e., an array is n-dimensional matrix while a matrix only has rows and columns (2 dimensions)

\item \textbf{Lists} The most common and flexible type of R object. A list is simply a collection of other objects. For example a regression object is a list of: 1)Coefficient estimates 2) Standard Errors 3) The Variance/Covariance matrix ...
\end{itemize}

We will look at examples of these objects in the next sectionl
\end{frame}
 
\begin{frame}[fragile]
\frametitle{R packages and the rasta package}
 R `packages' are user contributed functions. There are about 5000 or so (with a constantly expanding list). 
 If a package is already installed you load the package with the \verb+library()+ command. If you want to install a package you can use the \verb+install.packages()+ command (you have to provide the url of the CRAN mirror to download the package. 
 If you are using R Studio you can also just click on \textbf{Tools>Install Packages}, and type in the name(s) of the package you want to install. 

Now install and load the rasta package:
<<echo=TRUE, eval=FALSE>>=
install.packages("rasta", repos="http://R-Forge.R-project.org")
@
<<>>=
library(rasta) ## load the rasta library
@

<<eval=FALSE>>=
# ?mysummary
mysummary
@

\emph{What does the function do?}

\end{frame}


\begin{frame}[fragile]
\frametitle{Reading Data in and Out}
The most common way to read in data is with the \verb+read.csv()+ command. 
% However you can read in virtually any type of text file. 
Type ?read.table in your console for some other examples.

%% make the font small of these explanation sections.
% If you have really large binary data sets sometimes the \verb+scan()+ function is more efficient. 
% Finally using the \textbf{foreign} package you can read in SPSS, STATA, Matlab, SAS, and a host of other data formats from other stat and math software.
% Let's read in a basic csv file. 

<<readcsvexample>>=
f <- system.file("extdata/kenpop89to99.csv", package="rasta")
mydat<-read.csv(f)
@
We can explore the data using the  names(), summary(), head(), and tail() commands (we will use these frequently through out the exercise)

<<explore>>=
names(mydat)[1:3] #colunm names
summary(mydat$Y89Pop)[1:3]
head(mydat$Y89Births)[1:2]
@
What is the class of the $mydat$?
We will go over ways to index and subscript data.frames later. Lets do a basic regression so you can see an example of a list.
\end{frame}


\begin{frame}[fragile]
\frametitle{Basic regression and example of a list}
We use the \verb+lm()+ command to do a basic linear regression. The \verb+~+ symbol separates the left and right hand sides of the equation and we use `+' to separate terms and `*' to specify interactions.
\emph{Regress the Population in 1999 on the population and birthrate in 1989}
<<regression>>=
myreg<-lm(Y99Pop ~ Y89Births + Y89Brate, data = mydat) 
myreg[c(1,8)]
@

\end{frame}

\begin{frame}[fragile]
\frametitle{Basic regression and example of a list}
A regression object is an example of a list. We can use the \verb+names()+ command to see what the list contains. We can use the summary() command to get a standard regression output (coefficients, standard errors, et cetera) and we can also create a new object that contains all the elements of a regression summary.

<<>>=
names(myreg)[1:3]
myregsum <- summary(myreg)
names(myregsum)[1:2]
myregsum[['adj.r.squared']] #extract the adjusted r squared
myregsum$adj.r.squared # does the same thing
@

\textbf{why is $myregsum$ a list object? What is the advantage of a list?}
That concludes our basic introduction to data.frames and lists. There is alot more material out on the web if you are interested. Later in the exercise we will look at data.frames in more detail.
\end{frame}

\begin{frame}[fragile]
\frametitle{Set Your Working Directory}

Let's do some basic set up first. 

\begin{itemize}
  \item{Create a folder which will be your working directory e.g. \emph{Lesson1}}
	\item{Create an R script within that folder}
	\item{Set your working directory to the \emph{Lesson2} folder}
	\item{Create a $data$ folder within your working directory}
\end{itemize}

In the code block below type in the file path to where your data is being held and then (if you want) use the setwd() (set working directory) command to give R a default location to look for data files.

<<eval=FALSE>>=
setwd("yourworkingdirectory")
# This sets the working directory (where R looks for files)
getwd() # Double check your working directory
@

<<>>=
datdir <- file.path("data") ## path
@
\end{frame}

\begin{frame}[fragile]

\frametitle{Ex.Lesson 1: Write you own function to create a spatial map a country}
\textbf{Write a function to visualise data and plots different variables}
\begin{itemize}
\item Submit a clear, reproducible, and documented script to create a spatial map
\item The script needs to contain your name
\item {Filename: \emph{lastnamefirstname.R}}
\end{itemize}

\medskip
This will be a test to see if your R scripting levels are ok to continue the course in the coming months.

<<>>=
## Load required packages
library(raster)
@

<<echo=FALSE, eval=TRUE>>=
## Download data from gadm.org 
require(raster)
if (!file.exists(datdir)) { dir.create(datdir)}
if (!file.exists(file.path(datdir, "PHL_adm2.RData"))) {
  adm <- getData('GADM', country = 'PHL', level=2, path = 'data/')
} else {
  load(file.path(datdir, "PHL_adm2.RData"))
  adm <- gadm
}
@

<<echo=TRUE, eval=FALSE>>=
## Download data from gadm.org 
adm <- getData('GADM', country='PHL', level=2, path = datdir)
@
\end{frame}

\begin{frame}[fragile]
\frametitle{Ex.Lesson 1: Write you own function to create a spatial map a country}

<<phil, eval=TRUE, fig=TRUE, include=FALSE>>=
mar<-(adm[adm$NAME_1=="Marinduque",])
plot(mar, bg="dodgerblue", axes=T)
plot(mar, lwd=10, border="skyblue", add=T)
plot(mar, col="green4", add=T)
grid()
box()
invisible(text(getSpPPolygonsLabptSlots(mar), 
labels=as.character(mar$NAME_2), cex=1.1, col="white", font=2))
mtext(side=3, line=1, "Provincial Map of Marinduque", cex=2)
mtext(side=1, "Longitude", line=2.5, cex=1.1)
mtext(side=2, "Latitude", line=2.5, cex=1.1) 
text(122.08,13.22, "Projection: Geographic\n
Coordinate System: WGS 1984\n
Data Source: GADM.org\n
Created by: ARSsalvacion", adj=c(0,0), cex=0.7, col="grey20")
@
\end{frame}

\begin{frame}[fragile]
\frametitle{Ex.Lesson 1: Write you own function to create a spatial map a country}

\begin{figure}[!htp]
\centering
\includegraphics[width=0.6\textwidth]{Lesson_1-phil}
\caption{Adminstrative boundaries of Marinduque}
\end{figure}

\end{frame}

\begin{frame}
\frametitle{More information}
For more information about R please refer to the following links:
\begin{itemize}
\item {\url{http://www.statmethods.net/index.html} This is a great website for learning R function, graphs, and stats.}
\item {the book on Applied spatial Data analysis with R 
 \url{http://www.asdar-book.org/} \citep{Bivand:2013ux}.}
\item  {Visit \url{http://www.r-project.org/} and check out the Manuals i.e an introductions to R}
\item Overview of R functionality for spatial data analysis: \url{http://cran.r-project.org/web/views/Spatial.html}
\item \url{http://gis.stackexchange.com/questions/45327/tutorials-to-handle-spatial-data-in-r}
\end{itemize}
\end{frame}

\bibliographystyle{model5-names}
\bibliography{refs}


\end{document}
